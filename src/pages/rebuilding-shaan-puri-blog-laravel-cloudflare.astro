---
import { YouTube } from '@astro-community/astro-embed-youtube'

import Layout from '../layouts/Layout.astro'

const title =
	"How I Rebuilt Shaan Puri's Blog with Laravel & Cloudflare to Get Perfect 100 Google Web Vitals Scores"
const description =
	"Join me as I rebuild Shaan Puri's blog using Laravel, Nuxt, and Cloudflare, achieving perfect 100 Google Core Web Vitals scores. This post guides you through the entire process, highlighting key optimizations for web performance."
---

<Layout title={title} description={description}>
	<article
		class="prose lg:prose-xl prose-invert mx-auto my-8 mt-12 max-w-prose p-4 sm:mt-20 md:mt-24"
	>
		<h1>
			How I Rebuilt Shaan Puri's Blog with Laravel & Cloudflare to Get Perfect 100 Google Web Vitals
			Scores
		</h1>
		<YouTube id="jqpJQUmsCQA" class="aspect-video h-full w-full" />
		<p>
			Join me as I rebuild Shaan Puri's blog using Laravel, Nuxt, and Cloudflare, achieving perfect
			100 Google Core Web Vitals scores. This post guides you through the entire process,
			highlighting key optimizations for web performance.
		</p>
		<h2>Table of Contents</h2>
		<ul>
			<li><a href="#nuxt-app">Create the Nuxt App and Deploy to Cloudflare Pages</a></li>
			<li><a href="#sqlite-db">Create a SQLite Database using Cloudflare's D1 Database</a></li>
			<li><a href="#laravel-web-server">Create the Laravel Web Server</a></li>
			<li><a href="#model-controllers-api">Create the Model, Controllers, and API Routes</a></li>
			<li><a href="#cloudflare-worker">Create a Cloudflare Worker for the Cache Layer</a></li>
			<li><a href="#conclusion">Conclusion</a></li>
			<li><a href="#stay-updated">Stay Updated</a></li>
		</ul>

		<h2>Featured Technologies</h2>
		<ul>
			<li>Laravel</li>
			<li>Nuxt</li>
			<li>Cloudflare D1</li>
			<li>Cloudflare Pages</li>
			<li>Cloudflare Workers</li>
			<li>Cloudflare KV store</li>
			<li>TailwindCSS</li>
			<li>Vue.js</li>
			<li>REST API</li>
		</ul>

		<h2>Important Links</h2>
		<ul>
			<li>
				<a href="https://shaan-nuxt.pages.dev/" target="_blank">Visit Shaan Puri's Rebuilt Blog</a>
			</li>
			<li>
				<a href="https://github.com/rptrainor/shaan-nuxt" target="_blank"
					>Nuxt App on Cloudflare Pages code</a
				>
			</li>
			<li>
				<a href="https://github.com/rptrainor/shaan-api" target="_blank">Laravel REST API code</a>
			</li>
			<li>
				<a href="https://github.com/rptrainor/shaan-cloudflare-worker" target="_blank"
					>Cloudflare Worker code</a
				>
			</li>
			<li>
				<a href="https://github.com/renoki-co/l1" target="_blank"
					>Laravel and Cloudflare D1 connection</a
				>
			</li>
		</ul>

		<h2>Steps for Rebuilding Shaan Puri's Blog</h2>

		<h3 id="nuxt-app">Create the Nuxt App and Deploy to Cloudflare Pages</h3>
		<ol>
			<li>Make sure you create a Cloudflare account.</li>
			<li>Log in to your Cloudflare account.</li>
			<li>In your terminal run: <code>npx wrangler login</code></li>
			<li>Run: <code>pnpm create cloudflare@latest blog-app-client</code></li>
			<li>Select <strong>Website or web app</strong>.</li>
			<li>Select <strong>Nuxt</strong>.</li>
			<li>When asked "Do you want to deploy your application?" select <strong>yes</strong>.</li>
			<li>Change into the newly created directory with <code>cd blog-app-client</code>.</li>
			<li>You can run the template app with <code>pnpm run dev</code>.</li>
			<li>And you can deploy any new changes to the app with <code>pnpm run deploy</code>.</li>
			<li>Initialize git in the directory with <code>git init</code>.</li>
			<li>
				Create a new repository in GitHub and then connect and push your local app to the newly
				created repository:
			</li>
			<ul>
				<li><code>git add .</code></li>
				<li><code>git commit -m "create nuxt app on Cloudflare pages"</code></li>
				<li>
					<code
						>git remote add origin https://github.com/YOUR_GITHUB_USERNAME_HERE/blog-app-client.git
						&& git branch -M main && git push -u origin main</code
					>
				</li>
			</ul>
			<li>Add TailwindCSS to your app:</li>
			<ul>
				<li>Run <code>npx nuxi@latest module add tailwindcss</code></li>
				<li>Create your TailwindCSS config file with <code>npx tailwindcss init --ts</code></li>
			</ul>
			<li>
				Push your latest changes to git with <code>git commit -m "add tailwind to nuxt app"</code>.
			</li>
			<li>Now you can style and build your Nuxt app as you choose.</li>
		</ol>

		<h3 id="sqlite-db">Create a SQLite Database using Cloudflare's D1 Database</h3>
		<ol>
			<li>Run <code>npx wrangler d1 create blog-db</code>.</li>
			<li>
				Save the <code>database_id</code> found in the terminal for later use in your Laravel web server.
			</li>
		</ol>

		<h3 id="laravel-web-server">Create the Laravel Web Server</h3>
		<ol>
			<li>Ensure you have PHP and Composer installed and running on your local machine.</li>
			<li>Create a default Laravel app:</li>
			<ul>
				<li>
					In a new directory run <code
						>composer create-project --prefer-dist laravel/laravel="10.*" laravel-api && cd
						laravel-api</code
					>.
				</li>
			</ul>
			<li>
				In the directory of your Laravel web server, open the <code>.env</code> file and add the following
				environment variables:
				<ul>
					<li><code>CLOUDFLARE_D1_DATABASE_ID</code></li>
					<li><code>CLOUDFLARE_ACCOUNT_ID</code></li>
					<li><code>CLOUDFLARE_TOKEN</code></li>
				</ul>
			</li>
			<li>Create the D1 database connection with the L1 library:</li>
			<ul>
				<li>Run <code>composer require renoki-co/l1</code>.</li>
				<li>
					In <code>config/database.php</code> add the following connector:
					<pre><code>{`
        
  'connections' => [
    'd1' => [
      'driver' => 'd1',
      'prefix' => '',
      'database' => env('CLOUDFLARE_D1_DATABASE_ID', ''),
      'api' => 'https://api.cloudflare.com/client/v4',
      'auth' => [
        'token' => env('CLOUDFLARE_TOKEN', ''),
        'account_id' => env('CLOUDFLARE_ACCOUNT_ID', ''),
      ],
    ],
  ],
`}
        </code></pre>
				</li>
				<li>
					Set the Default Database Connection Name to <code>'d1'</code>:
					<pre><code>{`
'default' => 'd1',
`}
        </code></pre>
				</li>
			</ul>
		</ol>

		<h3 id="model-controllers-api">Create the Model, Controllers, and API Routes</h3>
		<ol>
			<li>Think about the data you want to persist in the D1 database.</li>
			<li>
				Create your first model in the <code>laravel-api</code> directory:
				<ul>
					<li>Run <code>php artisan make:model articles -m</code>.</li>
				</ul>
			</li>
			<li>
				Update the <code>up</code> function in the newly created migration file in <code
					>database/migrations/</code
				> to match your schema:
			</li>
			<pre><code>{`
use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
  /**
   * Run the migrations.
   */
  public function up(): void
  {
    Schema::create('articles', function (Blueprint $table) {
      $table->id();
      $table->timestamps();
      $table->string('slug')->unique();
      $table->string('title');
      $table->text('description')->nullable();
      $table->longText('body');
      $table->string('author_full_name')->nullable();
      $table->string('cover_img_src')->nullable();
      $table->string('cover_img_alt')->nullable();
      $table->boolean('is_active')->default(true);
      $table->date('published_date');
      $table->string('read_time');
      $table->index(['slug', 'is_active']);
    });
  }

  /**
   * Reverse the migrations.
   */
  public function down(): void
  {
    Schema::dropIfExists('articles');
  }
};  
    `}
    </code></pre>
			<li>Run your first migration against the D1 database:</li>
			<ul>
				<li>Run <code>php artisan migrate</code>.</li>
			</ul>
			<li>Check your migration in the Cloudflare dashboard.</li>
			<li>
				Update the model file in <code>app/Models/</code> to define which attributes are assignable:
				<pre><code>{`
      
namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class articles extends Model
{
use HasFactory;

/**
 * The attributes that are mass assignable.
 *
 * @var array<int, string>
 */
protected $fillable = [
  'slug', 'title', 'description', 'body', 'author_full_name', 'cover_img_src', 'cover_img_alt', 'is_active', 'published_date', 'read_time',
];
}
      `}
      </code></pre>
			</li>
			<li>Create the controller:</li>
			<ul>
				<li>Run <code>php artisan make:controller ArticleController</code>.</li>
			</ul>
			<li>Add public methods for each CRUD action in the controller file.</li>
			<li>Define the API endpoints for your Laravel REST API in <code>routes/api.php</code>.</li>
			<li>Test your Laravel API server:</li>
			<ul>
				<li>Run <code>php artisan serve</code>.</li>
			</ul>
		</ol>

		<h3 id="cloudflare-worker">Create a Cloudflare Worker for the Cache Layer</h3>
		<ol>
			<li>Back out of your Laravel API directory and prepare to create your Cloudflare Worker:</li>
			<ul>
				<li>Run <code>pnpm create cloudflare@latest blog-worker</code>.</li>
			</ul>
			<li>
				Follow the prompts in the terminal:
				<ul>
					<li>Select <strong>Hello World</strong> Worker.</li>
					<li>Select <strong>Yes</strong> for TypeScript.</li>
					<li>Select <strong>Yes</strong> to deploy your application.</li>
				</ul>
			</li>
			<li>Change directory into your new Cloudflare Worker:</li>
			<ul>
				<li>Run <code>pnpm run start</code>.</li>
				<li>Run <code>pnpm run deploy</code>.</li>
			</ul>
			<li>Use this worker as a cache layer to reduce latency for visitors to the blog.</li>
		</ol>

		<h3 id="conclusion">Conclusion</h3>
		<p>
			By following these steps, you can achieve perfect 100 Google Web Vitals scores for your blog.
			Leveraging Laravel, Nuxt, and Cloudflare, you can create a fast, efficient, and scalable blog
			that provides an excellent user experience.
		</p>
		<h3 id="stay-updated">Stay Updated</h3>
		<ul>
			<li><a href="https://twitter.com/rptrainor" target="_blank">Twitter</a></li>
			<li><a href="https://www.linkedin.com/in/rptrainor" target="_blank">LinkedIn</a></li>
		</ul>
	</article>
</Layout>
<script>
	document.addEventListener('DOMContentLoaded', function () {
		const playButtons = document.querySelectorAll('lite-youtube a.lty-playbtn')
		playButtons.forEach((button) => {
			if (button instanceof HTMLAnchorElement && !button.href) {
				button.href = 'https://youtube.com/watch?v=jqpJQUmsCQA'
			}
		})

		const tocLinks = document.querySelectorAll('a[href^="#"]')
		tocLinks.forEach((link) => {
			link.addEventListener('click', (event) => {
				event.preventDefault()
				const targetId = link.getAttribute('href')?.substring(1)
				if (targetId) {
					const targetElement = document.getElementById(targetId)
					if (targetElement) {
						targetElement.scrollIntoView({ behavior: 'smooth' })
					}
				}
			})
		})
	})
</script>
